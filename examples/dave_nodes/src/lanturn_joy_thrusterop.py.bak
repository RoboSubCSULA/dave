#!/usr/bin/env python3
'''
Node to directly control the thrusters
'''
import os

import rospy
from sensor_msgs.msg import Joy

from uuv_gazebo_ros_plugins_msgs.msg import FloatStamped


class ThrusterOp:
    def __init__(self, namespace='lanturn'):
        self.gain = 1000.0
        # Joystick to thruster i.d. mapping
        # Keys are the joystick axes, publishers
        self.joy2thrust = dict()

        # Forward
        self.joy2thrust[1] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,5), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,6), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,7), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,8), FloatStamped, queue_size=1)]

        # Strafe
        self.joy2thrust[0] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,5), FloatStamped, queue_size=10),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,6), FloatStamped, queue_size=10),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,7), FloatStamped, queue_size=10),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,8), FloatStamped, queue_size=10)]

#        # Yaw
#        self.joy2thrust[2] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,5), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,6), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,7), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,8), FloatStamped, queue_size=1)]
#
#        # Pitch
#        self.joy2thrust[3] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,1), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,2), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,3), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,4), FloatStamped, queue_size=1)]
#
#        # Roll
#        self.joy2thrust[4] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,1), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,2), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,3), FloatStamped, queue_size=1),
#                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,4), FloatStamped, queue_size=1)]
#
        # Depth
        self.joy2thrust[5] = [rospy.Publisher('/%s/thrusters/%d/input'%(namespace,1), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,2), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,3), FloatStamped, queue_size=1),
                              rospy.Publisher('/%s/thrusters/%d/input'%(namespace,4), FloatStamped, queue_size=1)]

        self.joy_sub = rospy.Subscriber('joy', Joy, self.joy_callback)

        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            rate.sleep()

    def check_if_thruster_should_be_inverted(self, axis_id, thruster_id):
        '''
        Check if the output of the thrusters should be inverted to produce the
        desired behavior.
        '''
        if axis_id == 0:
            if thruster_id in [2, 4]:
                return True
        return False

    def joy_callback(self, joy):
        msg = FloatStamped()
        for aa, ii in zip(joy.axes, range(len(joy.axes))):
            if ii in self.joy2thrust.keys():
                msg.data = aa*self.gain
                for pub in self.joy2thrust[ii]:
                    thruster_id = self.joy2thrust[ii].index(pub) + 1
                    if self.check_if_thruster_should_be_inverted(ii, thruster_id):
                        msg.data *= -1.0
                    print(ii, self.joy2thrust[ii].index(pub) + 1, msg.data)
                    print(self.check_if_thruster_should_be_inverted(ii, thruster_id))
                    pub.publish(msg)



def invert_value_from_thruster_behavior_map():
    '''
    Check if the output of the thrusters should be inverted to produce the
    desired behavior.
    '''



if __name__ == '__main__':
    # Start the node
    node_name = os.path.splitext(os.path.basename(__file__))[0]
    rospy.init_node(node_name)
    rospy.loginfo('Starting [%s] node' % node_name)

    # Get params
    ns = 'lanturn'
    if rospy.has_param('~namespace'):
        ns = rospy.get_param('~namespace')

    teleop = ThrusterOp(namespace=ns)
    rospy.spin()
    rospy.loginfo('Shutting down [%s] node' % node_name)
